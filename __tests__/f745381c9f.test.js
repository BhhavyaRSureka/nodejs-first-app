// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=332320feec

*/

// ********RoostGPT********
const express = require('express');
const request = require('supertest');
const cookieParser = require('cookie-parser');
const path = require('path');
const { jest } = require('@jest/globals');
const isAuthenticated = jest.requireActual('../isAuthenticated'); // Assuming isAuthenticated is a named export

// Set up express app for testing
const app = express();
app.use(express.urlencoded({ extended: false }));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(cookieParser());

// App routes
app.get("/", isAuthenticated, (req, res) => {
  res.render("logout", {
    name: req.user.name
  });
});

// Test suite for "/" endpoint
describe('GET / - Logout Page', () => {
  let server;

  // Mock the isAuthenticated middleware
  beforeEach(() => {
    // Clear module registry to reset middleware mock before each test
    jest.resetModules();
    jest.mock('../isAuthenticated', () => {
      return jest.fn((req, res, next) => {
        req.user = { name: 'Test User' }; // Mocked user object
        next();
      });
    });
  });

  // Start express server before each test
  beforeEach((done) => {
    server = app.listen(4000, done);
  });

  // End express server after each test
  afterEach((done) => {
    server.close(done);
  });

  test('should render logout page for authenticated user', async () => {
    const response = await request(server).get('/');
    expect(response.status).toBe(200);
    expect(response.text).toMatch(/Test User/); // Check if the username is rendered in the logout page
  });

  test('should not render logout page for unauthenticated user', async () => {
    // Override isAuthenticated mock for this test
    jest.mock('../isAuthenticated', () => {
      return jest.fn((req, res, next) => {
        res.status(401).send('Unauthorized');
      });
    });

    const response = await request(server).get('/');
    expect(response.status).toBe(401);
    expect(response.text).toBe('Unauthorized');
  });
});

