// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=967635a0c1

*/

// ********RoostGPT********
import { jest } from '@jest/globals';
import express from 'express';
import path from 'path';
import mongoose from 'mongoose';
import cookieParser from 'cookie-parser';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';

// Assuming the method to be tested is exported from index.js
import { connectToDatabase } from '../index';

// Test suite for the connectToDatabase method
describe('connectToDatabase', () => {
  let consoleSpy; // To mock console output

  // Mocking the console.log function before all tests
  beforeAll(() => {
    mongoose.connect = jest.fn(); // Mock mongoose.connect
    consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});
  });

  // Resetting mocks before each test
  beforeEach(() => {
    jest.resetAllMocks();
  });

  // Restore original functions after all tests
  afterAll(() => {
    consoleSpy.mockRestore();
  });

  // Test case for successful database connection
  test('should connect to the database successfully', async () => {
    mongoose.connect.mockResolvedValue(); // Simulate successful connection

    await connectToDatabase(); // Call the method to test

    expect(mongoose.connect).toHaveBeenCalledWith("mongodb://127.0.0.1:27017", {
      dbName: "backend"
    });
    expect(console.log).toHaveBeenCalledWith("Database Connected");
  });

  // Test case for database connection failure
  test('should handle database connection error', async () => {
    const errorMessage = "Database Connection Error";
    mongoose.connect.mockRejectedValue(new Error(errorMessage)); // Simulate connection failure 

    await connectToDatabase(); // Call the method to test

    expect(mongoose.connect).toHaveBeenCalledWith("mongodb://127.0.0.1:27017", {
      dbName: "backend"
    });
    expect(console.log).toHaveBeenCalledWith(new Error(errorMessage));
  });
});


