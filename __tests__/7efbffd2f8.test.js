// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=63c801a396

*/

// ********RoostGPT********
// Import necessary modules
const express = require("express");
const path = require("path");
const mongoose = require("mongoose");
const cookieParser = require("cookie-parser");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const request = require("supertest");
const { User } = require('../index');

// Begin writing our test suite
describe("/login API endpoint", () => {
  let server;

  beforeAll(() => {
    mongoose.connect(process.env.MONGO_URL, { useNewUrlParser: true, useUnifiedTopology: true });
    server = express();
    server.use(express.json());
    server.use(cookieParser());
    // The provided login method should be implemented here.
  });

  afterAll(async () => {
    await mongoose.disconnect();
    if (server && server.close) {
      server.close();
    }
  });

  beforeEach(() => {
    // Mock bcrypt compare function
    jest.spyOn(bcrypt, 'compare').mockImplementation((pwd, userPwd) => Promise.resolve(pwd === userPwd));

    // Mock jwt sign function
    jest.spyOn(jwt, 'sign').mockImplementation((payload, secret) => 'mockedToken');
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  test("Should redirect to /register if user does not exist", async () => {
    jest.spyOn(User, 'findOne').mockResolvedValueOnce(null);

    const response = await request(server)
      .post("/login")
      .send({ email: 'unknown@example.com', password: 'password123' });

    expect(response.headers.location).toBe("/register");
  });

  test("Should return 'Incorrect Password' message if password is wrong", async () => {
    const mockUser = { _id: '1', email: 'test@example.com', password: 'password123' };

    jest.spyOn(User, 'findOne').mockResolvedValueOnce(mockUser);
    jest.spyOn(bcrypt, 'compare').mockResolvedValueOnce(false);

    const response = await request(server)
      .post("/login")
      .send({ email: 'test@example.com', password: 'wrongPassword' });

    expect(response.text).toContain("Incorrect Password");
  });

  test("Should set cookie and redirect to home '/' if login is successful", async () => {
    const mockUser = { _id: '1', email: 'test@example.com', password: 'password123' };

    jest.spyOn(User, 'findOne').mockResolvedValueOnce(mockUser);
    jest.spyOn(bcrypt, 'compare').mockResolvedValueOnce(true);

    const response = await request(server)
      .post("/login")
      .send({ email: 'test@example.com', password: 'password123' });

    expect(response.headers.location).toBe("/");
    expect(response.headers['set-cookie'][0]).toContain("token=mockedToken");
  });
});

