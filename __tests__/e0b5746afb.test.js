// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeMochaTest using AI Type Open AI and AI Model gpt-4-1106-preview


ROOST_TEST_HASH=e40d9c5245

*/

// ********RoostGPT********
const express = require("express");
const path = require("path");
const mongoose = require("mongoose");
const cookieParser = require("cookie-parser");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const request = require("supertest");
const User = require("../User"); // Modify this according to actual User model path
const { app } = require("../index"); // Modify this according to actual app declaration file path

describe('/register endpoint', () => {
  let server;
  
  beforeAll(async () => {
    // Set up any global preconditions here
    server = app.listen(4000);
    // Example: connect to a test database
    await mongoose.connect('mongodb://localhost:27017/testdb', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    // Optional: Clear the users collection before each test runs
    await User.deleteMany({});
  });

  afterAll(async () => {
    // Disconnect from test database and stop the server
    await mongoose.disconnect();
    server.close();
  });

  test('should redirect to /login if user already exists', async () => {
    // Create a user before testing
    const hashedPassword = await bcrypt.hash("testpass", 10);
    await User.create({
      name: 'Test User',
      email: 'test@example.com',
      password: hashedPassword
    });

    const response = await request(app)
      .post("/register")
      .send({
        name: 'Test User',
        email: 'test@example.com',
        password: 'testpass'
      });

    expect(response.header['location']).toBe('/login');
    expect(response.status).toBe(302);
  });

  test('should create a new user and redirect to /', async () => {
    const response = await request(app)
      .post("/register")
      .send({
        name: 'New User',
        email: 'newuser@example.com',
        password: 'newpass'
      });

    // Check if user is created
    const user = await User.findOne({ email: 'newuser@example.com' });
    expect(user).toBeTruthy();
    expect(user.name).toBe('New User');

    // Check for redirect to home page
    expect(response.header['location']).toBe('/');
    expect(response.status).toBe(302);

    // Check for cookie with token
    const cookies = response.header['set-cookie'][0];
    expect(cookies).toContain('token=');
    expect(cookies).toContain('HttpOnly');
  });

  test('should handle missing fields', async () => {
    const response = await request(app)
      .post("/register")
      .send({
        name: '',
        email: 'userwithoutname@example.com',
        password: 'nopass'
      });

    // This assumes your endpoint sends a client error status, adjust as needed
    expect(response.status).toBe(400);
  });

  test('should handle weak passwords', async () => {
    // You might have a password validation in your route
    // This test assumes that weak passwords are rejected
    const response = await request(app)
      .post("/register")
      .send({
        name: 'Weak Password User',
        email: 'weakpass@example.com',
        password: '123' // example of a weak password
      });

    // Adjust the expected response status based on your app's logic
    expect(response.status).toBe(400);
  });
});

